generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  env           = "../.env"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Currency {
  id           String  @id @default(uuid()) @db.Uuid
  name         String  @unique @db.VarChar
  exchangeRate Int
  orders       Order[]

  @@map("currencies")
}

model Employee {
  id        String    @id @default(uuid()) @db.Uuid
  role      role
  name      String    @db.VarChar
  surname   String    @db.VarChar
  username  String    @unique @db.VarChar
  password  String    @db.VarChar
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime? @updatedAt @db.Date
  telegram  String    @unique @db.VarChar
  phone     String?   @db.VarChar
  email     String    @unique @db.VarChar
  orders    Order[]

  @@map("employees")
}

model OrderFile {
  id        String    @id @default(uuid()) @db.Uuid
  orderId   String    @db.Uuid
  type      fileType
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime? @updatedAt @db.Date
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("order_files")
}

model Order {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @db.Uuid
  managerId  String      @db.Uuid
  network    network
  currencyId String      @db.Uuid
  amount     Int
  status     orderStatus @default(CREATED)
  createdAt  DateTime    @default(now()) @db.Date
  updatedAt  DateTime?   @updatedAt @db.Date
  orderFiles OrderFile[]
  currency   Currency    @relation(fields: [currencyId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  employee   Employee    @relation(fields: [managerId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  user       User        @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@map("orders")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @db.VarChar
  surname   String?   @db.VarChar
  username  String    @unique @db.VarChar
  password  String    @db.VarChar()
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime? @updatedAt @db.Date
  telegram  String?   @unique @db.VarChar
  email     String    @unique @db.VarChar
  orders    Order[]

  @@map("users")
}

model Wallet {
  id      String  @id @default(uuid()) @db.Uuid
  network network
  address String  @unique @db.VarChar

  @@map("wallets")
}

enum fileType {
  PICTURE
  DOCUMENT
  OTHER
}

enum network {
  TRC20
  ERC20
  BEP20
}

enum orderStatus {
  CREATED
  PAID
  FULLFILLED
}

enum role {
  ADMIN
  SENIOR_MANAGER
  MANAGER
}
