generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  env           = "../.env"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model currencies {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String   @unique @db.VarChar
  exchange_rate Int
  orders        orders[]
}

model employees {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  role      role
  name      String    @db.VarChar
  surname   String    @db.VarChar
  username  String    @unique @db.VarChar
  password  String    @db.VarChar
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime? @updatedAt @db.Date
  telegram  String    @unique @db.VarChar
  phone     String?   @db.VarChar
  email     String    @unique @db.VarChar
  orders    orders[]
}

model order_files {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_id  String    @db.Uuid
  type      file_type
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime? @updatedAt @db.Date
  order     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String        @db.Uuid
  manager_id  String        @db.Uuid
  network     network
  currency_id String        @db.Uuid
  amount      Int
  status      order_status
  createdAt   DateTime      @default(now()) @db.Date
  updatedAt   DateTime?     @updatedAt @db.Date
  order_files order_files[]
  currency    currencies    @relation(fields: [currency_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  employee    employees     @relation(fields: [manager_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  user        users         @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
}

model users {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String    @db.VarChar
  surname   String?   @db.VarChar
  username  String    @unique @db.VarChar
  password  String    @db.VarChar()
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime? @updatedAt @db.Date
  telegram  String?   @unique @db.VarChar
  email     String    @unique @db.VarChar
  orders    orders[]
}

model wallets {
  id      String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  network network
  address String  @unique @db.VarChar
}

enum file_type {
  PICTURE
  DOCUMENT
  OTHER
}

enum network {
  TRC20
  ERC20
  BEP20
}

enum order_status {
  CREATED
  PAID
  FULFILLED
}

enum role {
  ADMIN
  SENIOR_MANAGER
  MANAGER
}
